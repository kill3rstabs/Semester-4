==============================================================
TASK 1
==============================================================
#include<stdio.h>
#include<signal.h>
#include<unistd.h>
void sig_handler(int signo)
{
if (signo == SIGUSR1)
printf("received SIGUSR1\n");
else if (signo == SIGKILL)
printf("received SIGKILL\n");
else if (signo == SIGSTOP)
printf("received SIGSTOP\n");
}
int main(void){
struct sigaction sa;
sa.sa_handler=sig_handler;
if (sigaction(SIGUSR1, &sa,NULL) == -1)
printf("\ncan't catch SIGUSR1\n");
if (sigaction(SIGKILL, &sa,NULL) == -1)
printf("\ncan't catch SIGKILL\n");
if (sigaction(SIGSTOP,&sa,NULL) == -1)
printf("\ncan't catch SIGSTOP\n");
// A long long wait so that we can easily issue a signal to this process
while(1)
sleep(1);
return 0;
}
==============================================================
TASK 2
==============================================================
#include <stdio.h>
#include <signal.h>
#include <unistd.h>

void sighandler(int sig_num){
   printf("SIGTSTP IGNORE\n");
   signal(SIGTSTP, SIG_IGN);
   signal(SIGKILL, SIG_IGN);
}

int main(){
   signal(SIGTSTP, sighandler);
   signal(SIGKILL, sighandler);
  while(1){ 
    sleep(2);
  }
return 0;
}
==============================================================
TASK 3
==============================================================
#include<stdio.h>
#include<unistd.h>
#include<wait.h>
#include<signal.h>
int state=1;
void signal_handler(int NUM){
int num;
if(state==1)
{
	printf("Enter Number: ");
	scanf("%d",&num);
	for(int i=1;i<=10;i++){
		printf("%d * %d = %d\n",num,i,num*i);}
	state=2;
}
else if(state==2)
{
	printf("\nIGNORING\n");
	signal(SIGINT, SIG_IGN);
	state=3;
}
else if(state==3)
{
	int power=num*num;
	printf("\n");
	for(int i=1;i<=10;i++){
		printf("%d * %d = %d\n",power,i,power*i);}
	state=4;
}
else if(state==4)
{
	printf("\nDEFAULT STATE\n");
	signal(SIGINT, SIG_DFL);
	state=5;
}
else if(state==5)
{
	signal(SIGINT, SIG_DFL);
}
}
int main()
{
signal(SIGINT, signal_handler);
while(1){
sleep(1);
if (state==3)
signal(SIGINT, signal_handler);
}
return 0;
}
